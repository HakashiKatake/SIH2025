"use client"

import { useState, useEffect } from "react"
import { View, Text, StyleSheet, TouchableOpacity, ScrollView, Alert, Share } from "react-native"
import { router, useLocalSearchParams } from "expo-router"
import { Ionicons } from "@expo/vector-icons"
import { SafeAreaContainer } from "../src/components/ui/SafeAreaContainer"
import { Header } from "../src/components/ui/Header"
import { Colors, Typography, Spacing, BorderRadius } from "../src/constants/DesignSystem"

interface ResourceRecommendation {
  resource: string
  currentUsage: number
  optimizedUsage: number
  savings: number
  savingsPercent: number
  applicationMethod: string
  timing: string
  frequency: string
}

export default function ResourceOptimizationResultsScreen() {
  const params = useLocalSearchParams()
  const [recommendations, setRecommendations] = useState<ResourceRecommendation[]>([])

  useEffect(() => {
    // Parse recommendations from params or load from API
    if (params.recommendations) {
      try {
        const parsedRecommendations = JSON.parse(params.recommendations as string)
        setRecommendations(parsedRecommendations)
      } catch (error) {
        console.error("Failed to parse recommendations:", error)
      }
    }
  }, [params.recommendations])

  const getTotalSavings = () => {
    if (recommendations.length === 0) return 0
    return recommendations.reduce((total, rec) => total + rec.savingsPercent, 0) / recommendations.length
  }

  const getTotalCostSavings = () => {
    // Mock cost calculation (₹ per unit)
    const costs = { "Water": 0.5, "Fertilizer (NPK)": 25, "Pesticide": 150 }
    return recommendations.reduce((total, rec) => {
      const unitCost = costs[rec.resource as keyof typeof costs] || 1
      return total + (rec.savings * unitCost)
    }, 0)
  }

  const handleShare = async () => {
    try {
      const shareContent = `Resource Optimization Results\n\nAverage ${getTotalSavings().toFixed(1)}% resource savings\nPotential savings: ₹${getTotalCostSavings().toFixed(0)}/season\n\nGenerated by Kisaan App`
      
      await Share.share({
        message: shareContent,
        title: "Resource Optimization Results"
      })
    } catch (error) {
      Alert.alert("Error", "Failed to share results")
    }
  }

  const handleSaveResults = () => {
    Alert.alert(
      "Save Results", 
      "Results saved to your optimization history!",
      [{ text: "OK" }]
    )
  }

  return (
    <SafeAreaContainer backgroundColor={Colors.background}>
      <Header 
        title="Optimization Results" 
        showBackButton={true} 
        onBackPress={() => router.back()}
      />

      <ScrollView style={styles.container}>
        {/* Summary Card */}
        <View style={styles.summaryCard}>
          <View style={styles.summaryHeader}>
            <View style={styles.summaryIcon}>
              <Ionicons name="checkmark-circle" size={40} color="#4CAF50" />
            </View>
            <View style={styles.summaryInfo}>
              <Text style={styles.summaryTitle}>Optimization Complete</Text>
              <Text style={styles.summarySubtitle}>
                Average {getTotalSavings().toFixed(1)}% resource savings
              </Text>
              <Text style={styles.summaryAmount}>
                Potential savings: ₹{getTotalCostSavings().toFixed(0)}/season
              </Text>
            </View>
          </View>
        </View>

        {/* Impact Metrics */}
        <View style={styles.metricsSection}>
          <Text style={styles.sectionTitle}>Environmental Impact</Text>
          <View style={styles.metricsGrid}>
            <View style={styles.metricCard}>
              <Ionicons name="water" size={24} color="#2196F3" />
              <Text style={styles.metricValue}>{(getTotalSavings() * 0.8).toFixed(0)}L</Text>
              <Text style={styles.metricLabel}>Water Saved</Text>
            </View>
            <View style={styles.metricCard}>
              <Ionicons name="leaf" size={24} color="#4CAF50" />
              <Text style={styles.metricValue}>{(getTotalSavings() * 0.15).toFixed(1)}kg</Text>
              <Text style={styles.metricLabel}>CO₂ Reduced</Text>
            </View>
            <View style={styles.metricCard}>
              <Ionicons name="earth" size={24} color="#FF9800" />
              <Text style={styles.metricValue}>{getTotalSavings().toFixed(0)}%</Text>
              <Text style={styles.metricLabel}>Soil Health</Text>
            </View>
          </View>
        </View>

        {/* Resource Recommendations */}
        <View style={styles.recommendationsSection}>
          <Text style={styles.sectionTitle}>Detailed Recommendations</Text>
          
          {recommendations.map((rec, index) => (
            <View key={index} style={styles.resourceCard}>
              <View style={styles.resourceHeader}>
                <View style={styles.resourceIconContainer}>
                  <Ionicons 
                    name={
                      rec.resource === "Water" ? "water" : 
                      rec.resource === "Fertilizer (NPK)" ? "leaf" : "bug"
                    } 
                    size={24} 
                    color="#1976D2" 
                  />
                </View>
                <View style={styles.resourceInfo}>
                  <Text style={styles.resourceName}>{rec.resource}</Text>
                  <Text style={styles.resourceSavings}>
                    {rec.savingsPercent.toFixed(1)}% reduction
                  </Text>
                </View>
                <View style={styles.resourceAmount}>
                  <Text style={styles.currentAmount}>
                    {rec.currentUsage.toFixed(1)}
                  </Text>
                  <Text style={styles.optimizedAmount}>
                    → {rec.optimizedUsage.toFixed(1)}
                  </Text>
                </View>
              </View>

              <View style={styles.resourceDetails}>
                <View style={styles.detailItem}>
                  <Text style={styles.detailLabel}>Method:</Text>
                  <Text style={styles.detailValue}>{rec.applicationMethod}</Text>
                </View>
                <View style={styles.detailItem}>
                  <Text style={styles.detailLabel}>Timing:</Text>
                  <Text style={styles.detailValue}>{rec.timing}</Text>
                </View>
                <View style={styles.detailItem}>
                  <Text style={styles.detailLabel}>Frequency:</Text>
                  <Text style={styles.detailValue}>{rec.frequency}</Text>
                </View>
              </View>
            </View>
          ))}
        </View>

        {/* What's Next Section */}
        <View style={styles.nextStepsSection}>
          <Text style={styles.sectionTitle}>What's Next?</Text>
          <View style={styles.nextStepCard}>
            <Ionicons name="calendar" size={20} color="#1976D2" />
            <Text style={styles.nextStepText}>
              Schedule automated resource applications based on these recommendations
            </Text>
          </View>
          <View style={styles.nextStepCard}>
            <Ionicons name="analytics" size={20} color="#1976D2" />
            <Text style={styles.nextStepText}>
              Monitor your field regularly and track actual savings
            </Text>
          </View>
          <View style={styles.nextStepCard}>
            <Ionicons name="refresh" size={20} color="#1976D2" />
            <Text style={styles.nextStepText}>
              Re-optimize weekly or when weather conditions change
            </Text>
          </View>
        </View>

        {/* Action Buttons */}
        <View style={styles.actionButtons}>
          <TouchableOpacity 
            style={styles.primaryButton}
            onPress={handleSaveResults}
          >
            <Ionicons name="save" size={20} color="white" />
            <Text style={styles.primaryButtonText}>Save Results</Text>
          </TouchableOpacity>
          
          <TouchableOpacity 
            style={styles.secondaryButton}
            onPress={handleShare}
          >
            <Ionicons name="share" size={20} color="#1976D2" />
            <Text style={styles.secondaryButtonText}>Share</Text>
          </TouchableOpacity>
        </View>
      </ScrollView>
    </SafeAreaContainer>
  )
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    padding: Spacing.lg,
  },
  summaryCard: {
    backgroundColor: Colors.surface,
    borderRadius: BorderRadius.lg,
    padding: Spacing.lg,
    marginBottom: Spacing.lg,
    shadowColor: "#000",
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
  },
  summaryHeader: {
    flexDirection: "row",
    alignItems: "center",
  },
  summaryIcon: {
    marginRight: Spacing.md,
  },
  summaryInfo: {
    flex: 1,
  },
  summaryTitle: {
    fontSize: Typography.headingSmall,
    fontWeight: "600",
    color: Colors.textPrimary,
    marginBottom: Spacing.xs,
  },
  summarySubtitle: {
    fontSize: Typography.bodyMedium,
    color: Colors.textSecondary,
    marginBottom: Spacing.xs,
  },
  summaryAmount: {
    fontSize: Typography.bodyLarge,
    fontWeight: "700",
    color: "#4CAF50",
  },
  metricsSection: {
    marginBottom: Spacing.lg,
  },
  sectionTitle: {
    fontSize: Typography.headingSmall,
    fontWeight: "600",
    color: Colors.textPrimary,
    marginBottom: Spacing.md,
  },
  metricsGrid: {
    flexDirection: "row",
    justifyContent: "space-between",
  },
  metricCard: {
    backgroundColor: Colors.surface,
    borderRadius: BorderRadius.md,
    padding: Spacing.md,
    alignItems: "center",
    flex: 1,
    marginHorizontal: Spacing.xs,
  },
  metricValue: {
    fontSize: Typography.headingSmall,
    fontWeight: "700",
    color: Colors.textPrimary,
    marginTop: Spacing.sm,
  },
  metricLabel: {
    fontSize: Typography.bodySmall,
    color: Colors.textSecondary,
    textAlign: "center",
  },
  recommendationsSection: {
    marginBottom: Spacing.lg,
  },
  resourceCard: {
    backgroundColor: Colors.surface,
    borderRadius: BorderRadius.md,
    padding: Spacing.md,
    marginBottom: Spacing.md,
    borderLeftWidth: 4,
    borderLeftColor: "#1976D2",
  },
  resourceHeader: {
    flexDirection: "row",
    alignItems: "center",
    marginBottom: Spacing.md,
  },
  resourceIconContainer: {
    backgroundColor: "#E3F2FD",
    padding: Spacing.sm,
    borderRadius: BorderRadius.sm,
    marginRight: Spacing.md,
  },
  resourceInfo: {
    flex: 1,
  },
  resourceName: {
    fontSize: Typography.bodyLarge,
    fontWeight: "600",
    color: Colors.textPrimary,
    marginBottom: Spacing.xs,
  },
  resourceSavings: {
    fontSize: Typography.bodySmall,
    color: "#4CAF50",
    fontWeight: "500",
  },
  resourceAmount: {
    alignItems: "flex-end",
  },
  currentAmount: {
    fontSize: Typography.bodyMedium,
    color: Colors.textSecondary,
    textDecorationLine: "line-through",
  },
  optimizedAmount: {
    fontSize: Typography.bodyLarge,
    fontWeight: "600",
    color: "#1976D2",
  },
  resourceDetails: {
    borderTopWidth: 1,
    borderTopColor: Colors.border,
    paddingTop: Spacing.md,
  },
  detailItem: {
    flexDirection: "row",
    justifyContent: "space-between",
    marginBottom: Spacing.xs,
  },
  detailLabel: {
    fontSize: Typography.bodySmall,
    color: Colors.textSecondary,
    fontWeight: "500",
  },
  detailValue: {
    fontSize: Typography.bodySmall,
    color: Colors.textPrimary,
    flex: 1,
    textAlign: "right",
  },
  nextStepsSection: {
    marginBottom: Spacing.xl,
  },
  nextStepCard: {
    flexDirection: "row",
    alignItems: "center",
    backgroundColor: Colors.surface,
    borderRadius: BorderRadius.md,
    padding: Spacing.md,
    marginBottom: Spacing.sm,
  },
  nextStepText: {
    fontSize: Typography.bodyMedium,
    color: Colors.textPrimary,
    marginLeft: Spacing.md,
    flex: 1,
  },
  actionButtons: {
    flexDirection: "row",
    gap: Spacing.md,
    marginBottom: Spacing.xl,
  },
  primaryButton: {
    flex: 1,
    flexDirection: "row",
    alignItems: "center",
    justifyContent: "center",
    backgroundColor: "#1976D2",
    borderRadius: BorderRadius.md,
    paddingVertical: Spacing.md,
    gap: Spacing.sm,
  },
  secondaryButton: {
    flex: 1,
    flexDirection: "row",
    alignItems: "center",
    justifyContent: "center",
    backgroundColor: "transparent",
    borderWidth: 1,
    borderColor: "#1976D2",
    borderRadius: BorderRadius.md,
    paddingVertical: Spacing.md,
    gap: Spacing.sm,
  },
  primaryButtonText: {
    fontSize: Typography.bodyMedium,
    fontWeight: "600",
    color: Colors.textInverse,
  },
  secondaryButtonText: {
    fontSize: Typography.bodyMedium,
    fontWeight: "600",
    color: "#1976D2",
  },
})
